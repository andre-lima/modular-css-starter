// Set column width, similar to a grid system, but more flexible
@mixin symetric-wrap ($num-elements, $wrap-width) {
  display: flex;

  @if is-even($num-elements) {
    & > * {
      $items-per-line: $num-elements;
      $to-media-width: $items-per-line * $wrap-width;
      $i: 1;
      
      flex-basis: (100 / $items-per-line)#{"%"};
      
      @while $items-per-line > 1 {
        $wrap-threshold: $items-per-line * $wrap-width;
        
        $i: $i + 1;
        $items-per-line: $num-elements / $i;
        
        // If items-per-line is not a divisor of num-elements, recalculate items-per-line until finding a divisor
        // ex: If num-elements is 6, items-per-line can only be 6, 3, 2 and 1
        @while $items-per-line != round($items-per-line) {
          $i: $i + 1;
          $items-per-line: $num-elements / $i;
        }
        
        @media (max-width: $wrap-threshold) {
          flex-basis: (100 / $items-per-line)#{"%"};
        }

      }
    }
  } @else {
    & > * {
      @include grid-column(1, $num-elements, $wrap-width);
    }
  }
}

@mixin grid-column($number-of-cols: 6, $grid-cols: 12, $wrap-width: auto) {
  $width: (floor(100 * $number-of-cols * 100/ $grid-cols) / 100)#{"%"};
  width: $width;
  min-width: $wrap-width;
}

@mixin flex($wrap: wrap, $direction: row) {
  display: flex;
  flex-wrap: $wrap;
  flex-direction: $direction;
}

@mixin wrap-mode () {
  //wrapped takes 100% of space
  //wrapped keeps width
  //only wrap pairs
}

@mixin vertical-center-children () {
  align-items: center;
}

@mixin border($width: 1px, $color: black, $radius: 0) {
  border: $width solid $color;
  border-radius: $radius;
}